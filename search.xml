<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>十大经典排序算法</title>
      <link href="2020/07/25/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>2020/07/25/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="排序算法说明"><a href="#排序算法说明" class="headerlink" title="排序算法说明"></a>排序算法说明</h2><h3 id="1、排序定义"><a href="#1、排序定义" class="headerlink" title="1、排序定义"></a>1、排序定义</h3><p>对一序列对象根据某个关键字进行排序。</p><h3 id="2、术语说明"><a href="#2、术语说明" class="headerlink" title="2、术语说明"></a>2、术语说明</h3><ul><li><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</li><li><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面。</li><li><strong>内排序</strong>：所有排序操作都在内存中完成。</li><li><strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行。</li><li><strong>时间复杂度</strong> ： 一个算法执行所耗费的时间。</li><li><strong>空间复杂度</strong> ：运行完一个程序所需内存的大小。</li></ul><h3 id="3、算法总结"><a href="#3、算法总结" class="headerlink" title="3、算法总结"></a>3、算法总结</h3><img src="https://i.loli.net/2020/07/25/o3Sm2UkZ1OD8M6T.png" style="zoom:67%;" /><p>图中名称解释：</p><ul><li><strong>n</strong>：数据规模。</li><li><strong>k</strong>：桶的个数。</li><li><strong>In-place</strong>：占用常数内存。</li><li><strong>Out-place</strong>：占用额外内存。</li></ul><h3 id="4、算法分类"><a href="#4、算法分类" class="headerlink" title="4、算法分类"></a>4、算法分类</h3><p><img src="https://i.loli.net/2020/07/25/wz7xTioQ4pkgcYX.png"></p><p>稳定排序：冒泡排序、插入排序、合并排序、计数排序、桶排序、基数排序。</p><p>不稳定排序：选择排序、希尔排序、快速排序、堆排序。</p><h2 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h2><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>步骤：</p><ol><li>比较相邻的两个元素，如果第一个比第二个大，就交换。</li><li>依次</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 悦读 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础命令</title>
      <link href="2020/07/23/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>2020/07/23/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-基础命令"><a href="#Linux-基础命令" class="headerlink" title="Linux 基础命令"></a>Linux 基础命令</h2><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><h3 id="目录处理命令"><a href="#目录处理命令" class="headerlink" title="目录处理命令"></a>目录处理命令</h3><h4 id="1、mkdir-创建新目录"><a href="#1、mkdir-创建新目录" class="headerlink" title="1、mkdir 创建新目录"></a>1、mkdir 创建新目录</h4><p>英文：make directories</p><p>所在路径：/bin/mkdir</p><p>权限：所有用户</p><p>语法：mkdir -p [目录名]</p><p>​                        -p 递归创建</p><h4 id="2、cd-切换目录"><a href="#2、cd-切换目录" class="headerlink" title="2、cd 切换目录"></a>2、cd 切换目录</h4><p>英文：change directories</p><p>所在路径：shell 内置命令</p><p>权限：所有用户</p><p>语法：cd [目标目录]</p><h4 id="3、pwd-显示当前目录"><a href="#3、pwd-显示当前目录" class="headerlink" title="3、pwd 显示当前目录"></a>3、pwd 显示当前目录</h4><p>英文：print working directory</p><p>所在路径：/bin/pwd</p><p>权限：所有用户</p><p>语法：pwd</p><h4 id="4、rmdir-删除空目录"><a href="#4、rmdir-删除空目录" class="headerlink" title="4、rmdir 删除空目录"></a>4、rmdir 删除空目录</h4><p>英文：remove empty directories</p><p>所在路径：/bin/rmdir</p><p>权限：所有用户</p><p>语法：rmdir [目录名]</p><h4 id="5、cp-复制文件或目录"><a href="#5、cp-复制文件或目录" class="headerlink" title="5、cp 复制文件或目录"></a>5、cp 复制文件或目录</h4><p>英文：copy</p><p>所在路径：/bin/cp</p><p>权限：所有用户</p><p>语法：cp -rp [原文件或目录] [目标目录]</p><p>​                  -r 复制目录</p><p>​                  -p 保留文件属性</p><h4 id="6、mv-剪切文件，改名"><a href="#6、mv-剪切文件，改名" class="headerlink" title="6、mv 剪切文件，改名"></a>6、mv 剪切文件，改名</h4><p>英文：move</p><p>所在路径：/bin/mv</p><p>权限：所有用户</p><p>语法：mv [原文件或目录] [目标目录]</p><ol start="7"><li><p>rm 删除文件</p><p>英文：remove</p><p>所在路径：/bin/rm</p><p>权限：所有用户</p><p>语法：rm -rf [文件或目录]</p><p>​                   -r 删除目录</p><p>​                   -f 强制执行</p></li></ol><h3 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h3><h4 id="1、touch-创建空文件"><a href="#1、touch-创建空文件" class="headerlink" title="1、touch 创建空文件"></a>1、touch 创建空文件</h4><p>所在路径：/bin/touch</p><p>权限：所有用户</p><p>语法：touch [文件名]</p><h4 id="2、cat-显示文件内容"><a href="#2、cat-显示文件内容" class="headerlink" title="2、cat 显示文件内容"></a>2、cat 显示文件内容</h4><p>所在路径：/bin/cat</p><p>权限：所有用户</p><p>语法：cat -n [文件名]</p><p>​                  -n 显示行号</p><h4 id="3、tac-显示文件内容（反向排列）"><a href="#3、tac-显示文件内容（反向排列）" class="headerlink" title="3、tac 显示文件内容（反向排列）"></a>3、tac 显示文件内容（反向排列）</h4><p>所在路径：/usr/bin/cat</p><p>权限：所有用户</p><p>语法：tac -n [文件名]</p><p>​                  -n 显示行号</p><h4 id="4、more-分页显示文件内容"><a href="#4、more-分页显示文件内容" class="headerlink" title="4、more 分页显示文件内容"></a>4、more 分页显示文件内容</h4><p>所在路径：/bin/more</p><p>权限：所有用户</p><p>语法：more [文件名]</p><p>​            (空格) 或 f 下一页</p><p>​            b                上一页</p><p>​            (Enter)       换行</p><p>​            q 或 Q        退出</p><h4 id="5、less-分页显示文件内容（向上翻页）"><a href="#5、less-分页显示文件内容（向上翻页）" class="headerlink" title="5、less 分页显示文件内容（向上翻页）"></a>5、less 分页显示文件内容（向上翻页）</h4><p>所在路径：/bin/less</p><p>权限：所有用户</p><p>语法：less [文件名]</p><h4 id="6、head-显示文件前几行"><a href="#6、head-显示文件前几行" class="headerlink" title="6、head 显示文件前几行"></a>6、head 显示文件前几行</h4><p>所在路径：/bin/head</p><p>权限：所有用户</p><p>语法：head -n 10 [文件名]</p><p>​                      -n 指定行数</p><h4 id="7、tail-显示文件后几行"><a href="#7、tail-显示文件后几行" class="headerlink" title="7、tail 显示文件后几行"></a>7、tail 显示文件后几行</h4><p>所在路径：/bin/tail</p><p>权限：所有用户</p><p>语法：tail -n 10 [文件名]</p><p>​                  -n 指定行数</p><p>​                  -f  动态显示文件末尾内容</p><h3 id="链接命令"><a href="#链接命令" class="headerlink" title="链接命令"></a>链接命令</h3><h4 id="ln-生成链接文件"><a href="#ln-生成链接文件" class="headerlink" title="ln 生成链接文件"></a>ln 生成链接文件</h4><p>英文：link</p><p>所在路径：/bin/ln</p><p>权限：所以用户</p><p>语法：ln -s [原文件] [目标文件]</p><p>​                -s 创建软链接（快捷方式）</p><p>硬连接特征</p><ol><li>cp -p + 同步更新</li><li>通过 i 节点识别</li><li>不能跨分区</li><li>不能针对目录使用</li></ol><h3 id="权限管理命令"><a href="#权限管理命令" class="headerlink" title="权限管理命令"></a>权限管理命令</h3><h4 id="1、chmod-修改文件或目录权限"><a href="#1、chmod-修改文件或目录权限" class="headerlink" title="1、chmod 修改文件或目录权限"></a>1、chmod 修改文件或目录权限</h4><p>英文：change the permissions mode of a file</p><p>所在路径：/bin/chmod</p><p>权限：所有用户</p><p>语法：chmod [{ugoa} {+-=} {rwx}] [文件或目录]</p><p>​                         [mode = 421] [文件或目录]</p><p>​                         -R 递归修改</p><img src="https://i.loli.net/2020/07/24/3s5qGEh9zVWmHaA.png" style="zoom:80%;" /><h4 id="2、chown-修改文件或目录的所有者"><a href="#2、chown-修改文件或目录的所有者" class="headerlink" title="2、chown 修改文件或目录的所有者"></a>2、chown 修改文件或目录的所有者</h4><p>英文：change file ownership</p><p>所在路径：/bin/chown</p><p>权限：所有用户</p><p>语法：chown [用户] [文件或目录]</p><h4 id="3、chgrp-修改文件的所属组"><a href="#3、chgrp-修改文件的所属组" class="headerlink" title="3、chgrp 修改文件的所属组"></a>3、chgrp 修改文件的所属组</h4><p>英文：change file group ownership</p><p>语法：chgrp [用户组] [文件或目录]</p><h4 id="4、umask-显示、设置文件的缺省权限"><a href="#4、umask-显示、设置文件的缺省权限" class="headerlink" title="4、umask 显示、设置文件的缺省权限"></a>4、umask 显示、设置文件的缺省权限</h4><p>英文：the user file-creation mask</p><p>路径：shell 内置命令</p><p>语法：umask [-S]</p><p>​                          -S 以 rwx 形式显示新建文件缺省权限</p><h3 id="文件搜索命令"><a href="#文件搜索命令" class="headerlink" title="文件搜索命令"></a>文件搜索命令</h3><h4 id="1、find-文件搜索"><a href="#1、find-文件搜索" class="headerlink" title="1、find 文件搜索"></a>1、find 文件搜索</h4><p>语法：find [搜索范围] [匹配条件]</p><p>​                    -name 根据名称</p><p>​                    -iname （不区分大小写）</p><p>​                    -size 根据大小 +n 大于 -n 小于 n 等于</p><p>​                    -user 根据所有者</p><p>​                    -group 根据所属组</p><p>​                    -amin 访问时间</p><p>​                    -cmin 文件属性</p><p>​                    -mmin 文件内容</p><p>​                    -a 两个条件同时满足</p><p>​                    -o 两个条件满足一个</p><p>​                    -type 根据文件类型</p><p>​                    -inum 根据 i 节点</p><p>​                    -exec/-ok [命令] {} ; 对搜索结果执行操作 （-ok 需要确认）</p><h4 id="2、locate-文件资料库中查找文件"><a href="#2、locate-文件资料库中查找文件" class="headerlink" title="2、locate 文件资料库中查找文件"></a>2、locate 文件资料库中查找文件</h4><p>所在路径：/usr/bin/locate</p><p>语法：locate [文件名]</p><h4 id="3、which-搜索命令所在位置及别名信息"><a href="#3、which-搜索命令所在位置及别名信息" class="headerlink" title="3、which 搜索命令所在位置及别名信息"></a>3、which 搜索命令所在位置及别名信息</h4><p>所在路径：/usr/bin/which</p><p>语法：which 命令</p><h4 id="4、whereis-搜索命令所在位置及帮助文档路径"><a href="#4、whereis-搜索命令所在位置及帮助文档路径" class="headerlink" title="4、whereis 搜索命令所在位置及帮助文档路径"></a>4、whereis 搜索命令所在位置及帮助文档路径</h4><p>所在路径：/usr/bin/whereis</p><p>语法：whereis 命令</p><h4 id="5、grep-在文件中搜寻字串匹配的行"><a href="#5、grep-在文件中搜寻字串匹配的行" class="headerlink" title="5、grep 在文件中搜寻字串匹配的行"></a>5、grep 在文件中搜寻字串匹配的行</h4><p>所在路径：/bin/grep</p><p>语法：grep -iv [指定字串] [文件]</p><p>​                     -i 不区分大小写</p><p>​                     -v 排除指定字串</p><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><h4 id="1、man-获得帮助信息"><a href="#1、man-获得帮助信息" class="headerlink" title="1、man 获得帮助信息"></a>1、man 获得帮助信息</h4><p>英文：manual</p><p>所在路径：/usr/bin/man</p><p>语法：man [命令或配置文件]</p><h4 id="2、help-获取-shell-内置命令的帮助信息"><a href="#2、help-获取-shell-内置命令的帮助信息" class="headerlink" title="2、help 获取 shell 内置命令的帮助信息"></a>2、help 获取 shell 内置命令的帮助信息</h4><p>所在路径：shell 内置命令</p><p>语法：help [命令]</p><h3 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h3><h4 id="1、useradd-添加新用户"><a href="#1、useradd-添加新用户" class="headerlink" title="1、useradd 添加新用户"></a>1、useradd 添加新用户</h4><p>所在路径：/usr/sbin/useradd</p><p>权限：root</p><p>语法：useradd 用户名</p><h4 id="2、passwd-设置用户密码"><a href="#2、passwd-设置用户密码" class="headerlink" title="2、passwd 设置用户密码"></a>2、passwd 设置用户密码</h4><p>所在路径：/usr/bin/passwd</p><p>语法：passwd 用户名</p><h4 id="3、who-查看登录用户信息"><a href="#3、who-查看登录用户信息" class="headerlink" title="3、who 查看登录用户信息"></a>3、who 查看登录用户信息</h4><p>所在路径：/bin/who</p><p>语法：who</p><h4 id="4、w-查看登录用户详细信息"><a href="#4、w-查看登录用户详细信息" class="headerlink" title="4、w 查看登录用户详细信息"></a>4、w 查看登录用户详细信息</h4><p>所在路径：/usr/bin/w</p><p>语法：w</p><h3 id="压缩解压命令"><a href="#压缩解压命令" class="headerlink" title="压缩解压命令"></a>压缩解压命令</h3><h4 id="1、gzip-压缩文件"><a href="#1、gzip-压缩文件" class="headerlink" title="1、gzip 压缩文件"></a>1、gzip 压缩文件</h4><p>所在路径：/bin/gzip</p><p>语法：gzip [文件]</p><h4 id="2、gunzip-解压-gz-的压缩文件"><a href="#2、gunzip-解压-gz-的压缩文件" class="headerlink" title="2、gunzip 解压 .gz 的压缩文件"></a>2、gunzip 解压 .gz 的压缩文件</h4><p>所在路径：/bin/gunzip</p><p>语法：gunzip [压缩文件]</p><h4 id="3、tar-打包目录"><a href="#3、tar-打包目录" class="headerlink" title="3、tar 打包目录"></a>3、tar 打包目录</h4><p>所在路径：/bin/tar</p><p>语法：tar [-zcf] [压缩后文件名] [目录]</p><p>​                    -c 打包</p><p>​                    -v 显示详细信息</p><p>​                    -f 指定文件名</p><p>​                    -z 打包同时压缩/解压缩</p><p>​                    -x 解包</p><h4 id="4、zip-压缩文件或目录"><a href="#4、zip-压缩文件或目录" class="headerlink" title="4、zip 压缩文件或目录"></a>4、zip 压缩文件或目录</h4><p>所在路径：/usr/bin/zip</p><p>语法：zip [-r] [压缩后文件名] [文件或目录]</p><p>​                    -r 压缩目录</p><h4 id="5、unzip-解压-zip-文件"><a href="#5、unzip-解压-zip-文件" class="headerlink" title="5、unzip 解压 .zip 文件"></a>5、unzip 解压 .zip 文件</h4><p>所在路径：/usr/bin/unzip</p><p>语法：unzip [压缩文件]</p><h4 id="6、bzip2-压缩文件"><a href="#6、bzip2-压缩文件" class="headerlink" title="6、bzip2 压缩文件"></a>6、bzip2 压缩文件</h4><p>所在路径：/usr/bin/bzip2</p><p>语法：bzip2 [-k] [文件]</p><p>​                        -k 保留原文件</p><p>​            tar -xjf [文件]</p><h4 id="7、bunzip2-解压-bz2-文件"><a href="#7、bunzip2-解压-bz2-文件" class="headerlink" title="7、bunzip2 解压 .bz2 文件"></a>7、bunzip2 解压 .bz2 文件</h4><p>所在路径：/usr/bin/bunzip2</p><p>语法：bunzip2 [-k] [压缩文件]</p><p>​                            -k 保留原文件</p><p>​            tar -xjf [压缩文件]</p><h3 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h3><h4 id="1、write-给用户发信息"><a href="#1、write-给用户发信息" class="headerlink" title="1、write 给用户发信息"></a>1、write 给用户发信息</h4><p>所在路径：/usr/bin/write</p><p>语法：write 用户名</p><p>​            ctrl + D 保存结束</p><h4 id="2、wall-发广播信息"><a href="#2、wall-发广播信息" class="headerlink" title="2、wall 发广播信息"></a>2、wall 发广播信息</h4><p>英文：write all</p><p>所在路径：/usr/bin/wall</p><p>语法：wall [message]</p><h4 id="3、ping-测试网络连通性"><a href="#3、ping-测试网络连通性" class="headerlink" title="3、ping 测试网络连通性"></a>3、ping 测试网络连通性</h4><p>所在路径：/bin/ping</p><p>语法：ping [-c] ip地址</p><p>​                      -c 指定发送次数</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 悦读 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="2020/07/23/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2020/07/23/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是正则表达式？"><a href="#什么是正则表达式？" class="headerlink" title="什么是正则表达式？"></a>什么是正则表达式？</h2><p><a href="https://gum.co/learn-regex"><img src="https://img.shields.io/badge/-Download%20PDF%20-0a0a0a.svg?style=flat&colorA=0a0a0a"></a></p><blockquote><p>正则表达式是一组由字母和符号组成的特殊文本，它可以用来从文本中找出满足你想要的格式的句子。</p></blockquote><p>一个正则表达式是一种从左到右匹配主体字符串的模式。<br>“Regular expression”这个词比较拗口，我们常使用缩写的术语“regex”或“regexp”。<br>正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等。</p><p>想象你正在写一个应用，然后你想设定一个用户命名的规则，让用户名包含字符、数字、下划线和连字符，以及限制字符的个数，好让名字看起来没那么丑。<br>我们使用以下正则表达式来验证一个用户名：</p><p><br/><br/></p><p align="center">  <img src="../img/regexp-cn.png" alt="Regular expression"></p><p>以上的正则表达式可以接受 <code>john_doe</code>、<code>jo-hn_doe</code>、<code>john12_as</code>。<br>但不匹配<code>Jo</code>，因为它包含了大写的字母而且太短了。</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#1-%E5%9F%BA%E6%9C%AC%E5%8C%B9%E9%85%8D">1. 基本匹配</a></li><li><a href="#2-%E5%85%83%E5%AD%97%E7%AC%A6">2. 元字符</a><ul><li><a href="#21-%E7%82%B9%E8%BF%90%E7%AE%97%E7%AC%A6-">2.1 点运算符 .</a></li><li><a href="#22-%E5%AD%97%E7%AC%A6%E9%9B%86">2.2 字符集</a><ul><li><a href="#221-%E5%90%A6%E5%AE%9A%E5%AD%97%E7%AC%A6%E9%9B%86">2.2.1 否定字符集</a></li></ul></li><li><a href="#23-%E9%87%8D%E5%A4%8D%E6%AC%A1%E6%95%B0">2.3 重复次数</a><ul><li><a href="#231--%E5%8F%B7">2.3.1 * 号</a></li><li><a href="#232--%E5%8F%B7">2.3.2 + 号</a></li><li><a href="#233--%E5%8F%B7">2.3.3 ? 号</a></li></ul></li><li><a href="#24--%E5%8F%B7">2.4 {} 号</a></li><li><a href="#25--%E7%89%B9%E5%BE%81%E6%A0%87%E7%BE%A4">2.5 (…) 特征标群</a></li><li><a href="#26--%E6%88%96%E8%BF%90%E7%AE%97%E7%AC%A6">2.6 | 或运算符</a></li><li><a href="#27-%E8%BD%AC%E7%A0%81%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6">2.7 转码特殊字符</a></li><li><a href="#28-%E9%94%9A%E7%82%B9">2.8 锚点</a><ul><li><a href="#281--%E5%8F%B7">2.8.1 ^ 号</a></li><li><a href="#282--%E5%8F%B7">2.8.2 $ 号</a></li></ul></li></ul></li><li><a href="#3-%E7%AE%80%E5%86%99%E5%AD%97%E7%AC%A6%E9%9B%86">3. 简写字符集</a></li><li><a href="#4-%E9%9B%B6%E5%AE%BD%E5%BA%A6%E6%96%AD%E8%A8%80%E5%89%8D%E5%90%8E%E9%A2%84%E6%9F%A5">4. 零宽度断言(前后预查)</a><ul><li><a href="#41--%E6%AD%A3%E5%85%88%E8%A1%8C%E6%96%AD%E8%A8%80">4.1 ?=… 正先行断言</a></li><li><a href="#42--%E8%B4%9F%E5%85%88%E8%A1%8C%E6%96%AD%E8%A8%80">4.2 ?!… 负先行断言</a></li><li><a href="#43---%E6%AD%A3%E5%90%8E%E5%8F%91%E6%96%AD%E8%A8%80">4.3 ?&lt;= … 正后发断言</a></li><li><a href="#44--%E8%B4%9F%E5%90%8E%E5%8F%91%E6%96%AD%E8%A8%80">4.4 ?&lt;!… 负后发断言</a></li></ul></li><li><a href="#5-%E6%A0%87%E5%BF%97">5. 标志</a><ul><li><a href="#51-%E5%BF%BD%E7%95%A5%E5%A4%A7%E5%B0%8F%E5%86%99-case-insensitive">5.1 忽略大小写（Case Insensitive）</a></li><li><a href="#52-%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2-global-search">5.2 全局搜索（Global search）</a></li><li><a href="#53-%E5%A4%9A%E8%A1%8C%E4%BF%AE%E9%A5%B0%E7%AC%A6-multiline">5.3 多行修饰符（Multiline）</a></li></ul></li><li><a href="#%E9%A2%9D%E5%A4%96%E8%A1%A5%E5%85%85">额外补充</a></li><li><a href="#%E8%B4%A1%E7%8C%AE">贡献</a></li><li><a href="#%E8%AE%B8%E5%8F%AF%E8%AF%81">许可证</a></li></ul><h2 id="1-基本匹配"><a href="#1-基本匹配" class="headerlink" title="1. 基本匹配"></a>1. 基本匹配</h2><p>正则表达式其实就是在执行搜索时的格式，它由一些字母和数字组合而成。<br>例如：一个正则表达式 <code>the</code>，它表示一个规则：由字母<code>t</code>开始，接着是<code>h</code>，再接着是<code>e</code>。</p><pre>"the" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.</pre><p><a href="https://regex101.com/r/dmRygT/1">在线练习</a></p><p>正则表达式<code>123</code>匹配字符串<code>123</code>。它逐个字符的与输入的正则表达式做比较。</p><p>正则表达式是大小写敏感的，所以<code>The</code>不会匹配<code>the</code>。</p><pre>"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.</pre><p><a href="https://regex101.com/r/1paXsy/1">在线练习</a></p><h2 id="2-元字符"><a href="#2-元字符" class="headerlink" title="2. 元字符"></a>2. 元字符</h2><p>正则表达式主要依赖于元字符。<br>元字符不代表他们本身的字面意思，他们都有特殊的含义。一些元字符写在方括号中的时候有一些特殊的意思。以下是一些元字符的介绍：</p><table><thead><tr><th align="center">元字符</th><th>描述</th></tr></thead><tbody><tr><td align="center">.</td><td>句号匹配任意单个字符除了换行符。</td></tr><tr><td align="center">[ ]</td><td>字符种类。匹配方括号内的任意字符。</td></tr><tr><td align="center">[^ ]</td><td>否定的字符种类。匹配除了方括号里的任意字符</td></tr><tr><td align="center">*</td><td>匹配&gt;=0个重复的在*号之前的字符。</td></tr><tr><td align="center">+</td><td>匹配&gt;=1个重复的+号前的字符。</td></tr><tr><td align="center">?</td><td>标记?之前的字符为可选.</td></tr><tr><td align="center">{n,m}</td><td>匹配num个大括号之前的字符或字符集 (n &lt;= num &lt;= m).</td></tr><tr><td align="center">(xyz)</td><td>字符集，匹配与 xyz 完全相等的字符串.</td></tr><tr><td align="center">&#124;</td><td>或运算符，匹配符号前或后的字符.</td></tr><tr><td align="center">&#92;</td><td>转义字符,用于匹配一些保留的字符 <code>[ ] ( ) &#123; &#125; . * + ? ^ $ \ &#124;</code></td></tr><tr><td align="center">^</td><td>从开始行开始匹配.</td></tr><tr><td align="center">$</td><td>从末端开始匹配.</td></tr></tbody></table><h2 id="2-1-点运算符"><a href="#2-1-点运算符" class="headerlink" title="2.1 点运算符 ."></a>2.1 点运算符 <code>.</code></h2><p><code>.</code>是元字符中最简单的例子。<br><code>.</code>匹配任意单个字符，但不匹配换行符。<br>例如，表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串。</p><pre>".ar" => The <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.</pre><p><a href="https://regex101.com/r/xc9GkU/1">在线练习</a></p><h2 id="2-2-字符集"><a href="#2-2-字符集" class="headerlink" title="2.2 字符集"></a>2.2 字符集</h2><p>字符集也叫做字符类。<br>方括号用来指定一个字符集。<br>在方括号中使用连字符来指定字符集的范围。<br>在方括号中的字符集不关心顺序。<br>例如，表达式<code>[Tt]he</code> 匹配 <code>the</code> 和 <code>The</code>。</p><pre>"[Tt]he" => <a href="#learn-regex"><strong>The</strong></a> car parked in <a href="#learn-regex"><strong>the</strong></a> garage.</pre><p><a href="https://regex101.com/r/2ITLQ4/1">在线练习</a></p><p>方括号的句号就表示句号。<br>表达式 <code>ar[.]</code> 匹配 <code>ar.</code>字符串</p><pre>"ar[.]" => A garage is a good place to park a c<a href="#learn-regex"><strong>ar.</strong></a></pre><p><a href="https://regex101.com/r/wL3xtE/1">在线练习</a></p><h3 id="2-2-1-否定字符集"><a href="#2-2-1-否定字符集" class="headerlink" title="2.2.1 否定字符集"></a>2.2.1 否定字符集</h3><p>一般来说 <code>^</code> 表示一个字符串的开头，但它用在一个方括号的开头的时候，它表示这个字符集是否定的。<br>例如，表达式<code>[^c]ar</code> 匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符。</p><pre>"[^c]ar" => The car <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.</pre><p><a href="https://regex101.com/r/nNNlq3/1">在线练习</a></p><h2 id="2-3-重复次数"><a href="#2-3-重复次数" class="headerlink" title="2.3 重复次数"></a>2.3 重复次数</h2><p>后面跟着元字符 <code>+</code>，<code>*</code> or <code>?</code> 的，用来指定匹配子模式的次数。<br>这些元字符在不同的情况下有着不同的意思。</p><h3 id="2-3-1-号"><a href="#2-3-1-号" class="headerlink" title="2.3.1 * 号"></a>2.3.1 <code>*</code> 号</h3><p><code>*</code>号匹配 在<code>*</code>之前的字符出现<code>大于等于0</code>次。<br>例如，表达式 <code>a*</code> 匹配0或更多个以a开头的字符。表达式<code>[a-z]*</code> 匹配一个行中所有以小写字母开头的字符串。</p><pre>"[a-z]*" => T<a href="#learn-regex"><strong>he</strong></a> <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>parked</strong></a> <a href="#learn-regex"><strong>in</strong></a> <a href="#learn-regex"><strong>the</strong></a> <a href="#learn-regex"><strong>garage</strong></a> #21.</pre><p><a href="https://regex101.com/r/7m8me5/1">在线练习</a></p><p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>。<br><code>*</code>和表示匹配空格的符号<code>\s</code>连起来用，如表达式<code>\s*cat\s*</code>匹配0或更多个空格开头和0或更多个空格结尾的cat字符串。</p><pre>"\s*cat\s*" => The fat<a href="#learn-regex"><strong> cat </strong></a>sat on the con<a href="#learn-regex"><strong>cat</strong></a>enation.</pre><p><a href="https://regex101.com/r/gGrwuz/1">在线练习</a></p><h3 id="2-3-2-号"><a href="#2-3-2-号" class="headerlink" title="2.3.2 + 号"></a>2.3.2 <code>+</code> 号</h3><p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;=1 次。<br>例如表达式<code>c.+t</code> 匹配以首字母<code>c</code>开头以<code>t</code>结尾，中间跟着至少一个字符的字符串。</p><pre>"c.+t" => The fat <a href="#learn-regex"><strong>cat sat on the mat</strong></a>.</pre><p><a href="https://regex101.com/r/Dzf9Aa/1">在线练习</a></p><h3 id="2-3-3-号"><a href="#2-3-3-号" class="headerlink" title="2.3.3 ? 号"></a>2.3.3 <code>?</code> 号</h3><p>在正则表达式中元字符 <code>?</code> 标记在符号前面的字符为可选，即出现 0 或 1 次。<br>例如，表达式 <code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code>。</p><pre>"[T]he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.</pre><p><a href="https://regex101.com/r/cIg9zm/1">在线练习</a></p><pre>"[T]?he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in t<a href="#learn-regex"><strong>he</strong></a> garage.</pre><p><a href="https://regex101.com/r/kPpO2x/1">在线练习</a></p><h2 id="2-4-号"><a href="#2-4-号" class="headerlink" title="2.4 {} 号"></a>2.4 <code>&#123;&#125;</code> 号</h2><p>在正则表达式中 <code>&#123;&#125;</code> 是一个量词，常用来限定一个或一组字符可以重复出现的次数。<br>例如， 表达式 <code>[0-9]&#123;2,3&#125;</code> 匹配最少 2 位最多 3 位 0~9 的数字。</p><pre>"[0-9]{2,3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.</pre><p><a href="https://regex101.com/r/juM86s/1">在线练习</a></p><p>我们可以省略第二个参数。<br>例如，<code>[0-9]&#123;2,&#125;</code> 匹配至少两位 0~9 的数字。</p><pre>"[0-9]{2,}" => The number was 9.<a href="#learn-regex"><strong>9997</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.</pre><p><a href="https://regex101.com/r/Gdy4w5/1">在线练习</a></p><p>如果逗号也省略掉则表示重复固定的次数。<br>例如，<code>[0-9]&#123;3&#125;</code> 匹配3位数字</p><pre>"[0-9]{3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to 10.0.</pre><p><a href="https://regex101.com/r/Sivu30/1">在线练习</a></p><h2 id="2-5-特征标群"><a href="#2-5-特征标群" class="headerlink" title="2.5 (...) 特征标群"></a>2.5 <code>(...)</code> 特征标群</h2><p>特征标群是一组写在 <code>(...)</code> 中的子模式。<code>(...)</code> 中包含的内容将会被看成一个整体，和数学中小括号（ ）的作用相同。例如, 表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个 <code>ab</code>。如果没有使用 <code>(...)</code> ，那么表达式 <code>ab*</code> 将匹配连续出现 0 或更多个 <code>b</code> 。再比如之前说的 <code>&#123;&#125;</code> 是用来表示前面一个字符出现指定次数。但如果在 <code>&#123;&#125;</code> 前加上特征标群 <code>(...)</code> 则表示整个标群内的字符重复 N 次。</p><p>我们还可以在 <code>()</code> 中用或字符 <code>|</code> 表示或。例如，<code>(c|g|p)ar</code> 匹配 <code>car</code> 或 <code>gar</code> 或 <code>par</code>.</p><pre>"(c|g|p)ar" => The <a href="#learn-regex"><strong>car</strong></a> is <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.</pre><p><a href="https://regex101.com/r/tUxrBG/1">在线练习</a></p><h2 id="2-6-或运算符"><a href="#2-6-或运算符" class="headerlink" title="2.6 | 或运算符"></a>2.6 <code>|</code> 或运算符</h2><p>或运算符就表示或，用作判断条件。</p><p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或 <code>car</code>。</p><pre>"(T|t)he|car" => <a href="#learn-regex"><strong>The</strong></a> <a href="#learn-regex"><strong>car</strong></a> is parked in <a href="#learn-regex"><strong>the</strong></a> garage.</pre><p><a href="https://regex101.com/r/fBXyX0/1">在线练习</a></p><h2 id="2-7-转码特殊字符"><a href="#2-7-转码特殊字符" class="headerlink" title="2.7 转码特殊字符"></a>2.7 转码特殊字符</h2><p>反斜线 <code>\</code> 在表达式中用于转码紧跟其后的字符。用于指定 <code>&#123; &#125; [ ] / \ + * . $ ^ | ?</code> 这些特殊字符。如果想要匹配这些特殊字符则要在其前面加上反斜线 <code>\</code>。</p><p>例如 <code>.</code> 是用来匹配除换行符外的所有字符的。如果想要匹配句子中的 <code>.</code> 则要写成 <code>\.</code> 以下这个例子 <code>\.?</code>是选择性匹配<code>.</code></p><pre>"(f|c|m)at\.?" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> sat on the <a href="#learn-regex"><strong>mat.</strong></a></pre><p><a href="https://regex101.com/r/DOc5Nu/1">在线练习</a></p><h2 id="2-8-锚点"><a href="#2-8-锚点" class="headerlink" title="2.8 锚点"></a>2.8 锚点</h2><p>在正则表达式中，想要匹配指定开头或结尾的字符串就要使用到锚点。<code>^</code> 指定开头，<code>$</code> 指定结尾。</p><h3 id="2-8-1-号"><a href="#2-8-1-号" class="headerlink" title="2.8.1 ^ 号"></a>2.8.1 <code>^</code> 号</h3><p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头。</p><p>例如，在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果 <code>a</code>。但如果使用 <code>^b</code> 将匹配不到任何结果。因为在字符串 <code>abc</code> 中并不是以 <code>b</code> 开头。</p><p>例如，<code>^(T|t)he</code> 匹配以 <code>The</code> 或 <code>the</code> 开头的字符串。</p><pre>"(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in <a href="#learn-regex"><strong>the</strong></a> garage.</pre><p><a href="https://regex101.com/r/5ljjgB/1">在线练习</a></p><pre>"^(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.</pre><p><a href="https://regex101.com/r/jXrKne/1">在线练习</a></p><h3 id="2-8-2-号"><a href="#2-8-2-号" class="headerlink" title="2.8.2 $ 号"></a>2.8.2 <code>$</code> 号</h3><p>同理于 <code>^</code> 号，<code>$</code> 号用来匹配字符是否是最后一个。</p><p>例如，<code>(at\.)$</code> 匹配以 <code>at.</code> 结尾的字符串。</p><pre>"(at\.)" => The fat c<a href="#learn-regex"><strong>at.</strong></a> s<a href="#learn-regex"><strong>at.</strong></a> on the m<a href="#learn-regex"><strong>at.</strong></a></pre><p><a href="https://regex101.com/r/y4Au4D/1">在线练习</a></p><pre>"(at\.)$" => The fat cat. sat. on the m<a href="#learn-regex"><strong>at.</strong></a></pre><p><a href="https://regex101.com/r/t0AkOd/1">在线练习</a></p><h2 id="3-简写字符集"><a href="#3-简写字符集" class="headerlink" title="3. 简写字符集"></a>3. 简写字符集</h2><p>正则表达式提供一些常用的字符集简写。如下:</p><table><thead><tr><th align="center">简写</th><th>描述</th></tr></thead><tbody><tr><td align="center">.</td><td>除换行符外的所有字符</td></tr><tr><td align="center">\w</td><td>匹配所有字母数字，等同于 <code>[a-zA-Z0-9_]</code></td></tr><tr><td align="center">\W</td><td>匹配所有非字母数字，即符号，等同于： <code>[^\w]</code></td></tr><tr><td align="center">\d</td><td>匹配数字： <code>[0-9]</code></td></tr><tr><td align="center">\D</td><td>匹配非数字： <code>[^\d]</code></td></tr><tr><td align="center">\s</td><td>匹配所有空格字符，等同于： <code>[\t\n\f\r\p&#123;Z&#125;]</code></td></tr><tr><td align="center">\S</td><td>匹配所有非空格字符： <code>[^\s]</code></td></tr><tr><td align="center">\f</td><td>匹配一个换页符</td></tr><tr><td align="center">\n</td><td>匹配一个换行符</td></tr><tr><td align="center">\r</td><td>匹配一个回车符</td></tr><tr><td align="center">\t</td><td>匹配一个制表符</td></tr><tr><td align="center">\v</td><td>匹配一个垂直制表符</td></tr><tr><td align="center">\p</td><td>匹配 CR/LF（等同于 <code>\r\n</code>），用来匹配 DOS 行终止符</td></tr></tbody></table><h2 id="4-零宽度断言（前后预查）"><a href="#4-零宽度断言（前后预查）" class="headerlink" title="4. 零宽度断言（前后预查）"></a>4. 零宽度断言（前后预查）</h2><p>先行断言和后发断言都属于<strong>非捕获簇</strong>（不捕获文本 ，也不针对组合计进行计数）。<br>先行断言用于判断所匹配的格式是否在另一个确定的格式之前，匹配结果不包含该确定格式（仅作为约束）。</p><p>例如，我们想要获得所有跟在 <code>$</code> 符号后的数字，我们可以使用正后发断言 <code>(?&lt;=\$)[0-9\.]*</code>。<br>这个表达式匹配 <code>$</code> 开头，之后跟着 <code>0,1,2,3,4,5,6,7,8,9,.</code> 这些字符可以出现大于等于 0 次。</p><p>零宽度断言如下：</p><table><thead><tr><th align="center">符号</th><th>描述</th></tr></thead><tbody><tr><td align="center">?=</td><td>正先行断言-存在</td></tr><tr><td align="center">?!</td><td>负先行断言-排除</td></tr><tr><td align="center">?&lt;=</td><td>正后发断言-存在</td></tr><tr><td align="center">?&lt;!</td><td>负后发断言-排除</td></tr></tbody></table><h3 id="4-1-正先行断言"><a href="#4-1-正先行断言" class="headerlink" title="4.1 ?=... 正先行断言"></a>4.1 <code>?=...</code> 正先行断言</h3><p><code>?=...</code> 正先行断言，表示第一部分表达式之后必须跟着 <code>?=...</code>定义的表达式。</p><p>返回结果只包含满足匹配条件的第一部分表达式。<br>定义一个正先行断言要使用 <code>()</code>。在括号内部使用一个问号和等号： <code>(?=...)</code>。</p><p>正先行断言的内容写在括号中的等号后面。<br>例如，表达式 <code>(T|t)he(?=\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，在括号中我们又定义了正先行断言 <code>(?=\sfat)</code> ，即 <code>The</code> 和 <code>the</code> 后面紧跟着 <code>(空格)fat</code>。</p><pre>"(T|t)he(?=\sfat)" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.</pre><p><a href="https://regex101.com/r/IDDARt/1">在线练习</a></p><h3 id="4-2-负先行断言"><a href="#4-2-负先行断言" class="headerlink" title="4.2 ?!... 负先行断言"></a>4.2 <code>?!...</code> 负先行断言</h3><p>负先行断言 <code>?!</code> 用于筛选所有匹配结果，筛选条件为 其后不跟随着断言中定义的格式。<br><code>正先行断言</code>  定义和 <code>负先行断言</code> 一样，区别就是 <code>=</code> 替换成 <code>!</code> 也就是 <code>(?!...)</code>。</p><p>表达式 <code>(T|t)he(?!\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，且其后不跟着 <code>(空格)fat</code>。</p><pre>"(T|t)he(?!\sfat)" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.</pre><p><a href="https://regex101.com/r/V32Npg/1">在线练习</a></p><h3 id="4-3-lt-正后发断言"><a href="#4-3-lt-正后发断言" class="headerlink" title="4.3 ?&lt;= ... 正后发断言"></a>4.3 <code>?&lt;= ...</code> 正后发断言</h3><p>正后发断言 记作<code>(?&lt;=...)</code> 用于筛选所有匹配结果，筛选条件为 其前跟随着断言中定义的格式。<br>例如，表达式 <code>(?&lt;=(T|t)he\s)(fat|mat)</code> 匹配 <code>fat</code> 和 <code>mat</code>，且其前跟着 <code>The</code> 或 <code>the</code>。</p><pre>"(?<=(T|t)he\s)(fat|mat)" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the <a href="#learn-regex"><strong>mat</strong></a>.</pre><p><a href="https://regex101.com/r/avH165/1">在线练习</a></p><h3 id="4-4-lt-负后发断言"><a href="#4-4-lt-负后发断言" class="headerlink" title="4.4 ?&lt;!... 负后发断言"></a>4.4 <code>?&lt;!...</code> 负后发断言</h3><p>负后发断言 记作 <code>(?&lt;!...)</code> 用于筛选所有匹配结果，筛选条件为 其前不跟随着断言中定义的格式。<br>例如，表达式 <code>(?&lt;!(T|t)he\s)(cat)</code> 匹配 <code>cat</code>，且其前不跟着 <code>The</code> 或 <code>the</code>。</p><pre>"(?&lt;!(T|t)he\s)(cat)" => The cat sat on <a href="#learn-regex"><strong>cat</strong></a>.</pre><p><a href="https://regex101.com/r/8Efx5G/1">在线练习</a></p><h2 id="5-标志"><a href="#5-标志" class="headerlink" title="5. 标志"></a>5. 标志</h2><p>标志也叫模式修正符，因为它可以用来修改表达式的搜索结果。<br>这些标志可以任意的组合使用，它也是整个正则表达式的一部分。</p><table><thead><tr><th align="center">标志</th><th>描述</th></tr></thead><tbody><tr><td align="center">i</td><td>忽略大小写。</td></tr><tr><td align="center">g</td><td>全局搜索。</td></tr><tr><td align="center">m</td><td>多行修饰符：锚点元字符 <code>^</code> <code>$</code> 工作范围在每行的起始。</td></tr></tbody></table><h3 id="5-1-忽略大小写-Case-Insensitive"><a href="#5-1-忽略大小写-Case-Insensitive" class="headerlink" title="5.1 忽略大小写 (Case Insensitive)"></a>5.1 忽略大小写 (Case Insensitive)</h3><p>修饰语 <code>i</code> 用于忽略大小写。<br>例如，表达式 <code>/The/gi</code> 表示在全局搜索 <code>The</code>，在后面的 <code>i</code> 将其条件修改为忽略大小写，则变成搜索 <code>the</code> 和 <code>The</code>，<code>g</code> 表示全局搜索。</p><pre>"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.</pre><p><a href="https://regex101.com/r/dpQyf9/1">在线练习</a></p><pre>"/The/gi" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.</pre><p><a href="https://regex101.com/r/ahfiuh/1">在线练习</a></p><h3 id="5-2-全局搜索-Global-search"><a href="#5-2-全局搜索-Global-search" class="headerlink" title="5.2 全局搜索 (Global search)"></a>5.2 全局搜索 (Global search)</h3><p>修饰符 <code>g</code> 常用于执行一个全局搜索匹配，即（不仅仅返回第一个匹配的，而是返回全部）。<br>例如，表达式 <code>/.(at)/g</code> 表示搜索 任意字符（除了换行）+ <code>at</code>，并返回全部结果。</p><pre>"/.(at)/" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the mat.</pre><p><a href="https://regex101.com/r/jnk6gM/1">在线练习</a></p><pre>"/.(at)/g" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> <a href="#learn-regex"><strong>sat</strong></a> on the <a href="#learn-regex"><strong>mat</strong></a>.</pre><p><a href="https://regex101.com/r/dO1nef/1">在线练习</a></p><h3 id="5-3-多行修饰符-Multiline"><a href="#5-3-多行修饰符-Multiline" class="headerlink" title="5.3 多行修饰符 (Multiline)"></a>5.3 多行修饰符 (Multiline)</h3><p>多行修饰符 <code>m</code> 常用于执行一个多行匹配。</p><p>像之前介绍的 <code>(^,$)</code> 用于检查格式是否是在待检测字符串的开头或结尾。但我们如果想要它在每行的开头和结尾生效，我们需要用到多行修饰符 <code>m</code>。</p><p>例如，表达式 <code>/at(.)?$/gm</code> 表示小写字符 <code>a</code> 后跟小写字符 <code>t</code> ，末尾可选除换行符外任意字符。根据 <code>m</code> 修饰符，现在表达式匹配每行的结尾。</p><pre>"/.at(.)?$/" => The fat                cat sat                on the <a href="#learn-regex"><strong>mat.</strong></a></pre><p><a href="https://regex101.com/r/hoGMkP/1">在线练习</a></p><pre>"/.at(.)?$/gm" => The <a href="#learn-regex"><strong>fat</strong></a>                  cat <a href="#learn-regex"><strong>sat</strong></a>                  on the <a href="#learn-regex"><strong>mat.</strong></a></pre><p><a href="https://regex101.com/r/E88WE2/1">在线练习</a></p><h3 id="6-贪婪匹配与惰性匹配-Greedy-vs-lazy-matching"><a href="#6-贪婪匹配与惰性匹配-Greedy-vs-lazy-matching" class="headerlink" title="6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching)"></a>6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching)</h3><p>正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 <code>?</code> 将贪婪匹配模式转化为惰性匹配模式。</p><pre>"/(.*at)/" => <a href="#learn-regex"><strong>The fat cat sat on the mat</strong></a>. </pre><p><a href="https://regex101.com/r/AyAdgJ/1">在线练习</a></p><pre>"/(.*?at)/" => <a href="#learn-regex"><strong>The fat</strong></a> cat sat on the mat. </pre><p><a href="https://regex101.com/r/AyAdgJ/2">在线练习</a></p><p><a href="https://twitter.com/ziishaned">https://twitter.com/ziishaned</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 悦读 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 基础篇(三)</title>
      <link href="2020/07/21/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87-%E4%B8%89/"/>
      <url>2020/07/21/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h2 id="事务隔离：为什么你改了我还看不见？"><a href="#事务隔离：为什么你改了我还看不见？" class="headerlink" title="事务隔离：为什么你改了我还看不见？"></a>事务隔离：为什么你改了我还看不见？</h2><p>简单来说，事务就是要保证一组数据库操作，要么全部成功，要么全部失败。在 MySQL 中，事务支持是在引擎层实现的。你现在知道，MySQL 是一个支持多引擎的系统，但并不是所有的引擎都支持事务。比如 MySQL 原生的 MyISAM 引擎就不支持事务，这也是 MyISAM 被 InnoDB 取代的重要原因之一。</p><h3 id="隔离性与隔离级别"><a href="#隔离性与隔离级别" class="headerlink" title="隔离性与隔离级别"></a>隔离性与隔离级别</h3>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 悦读 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 基础篇(二)</title>
      <link href="2020/07/20/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87-%E4%BA%8C/"/>
      <url>2020/07/20/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="日志系统：一条-SQL-更新语句是如何执行的？"><a href="#日志系统：一条-SQL-更新语句是如何执行的？" class="headerlink" title="日志系统：一条 SQL 更新语句是如何执行的？"></a>日志系统：一条 SQL 更新语句是如何执行的？</h2><p>首先，可以确定的说，查询语句的那一套流程，更新语句也是同样会走一遍。</p><img src="https://i.loli.net/2020/07/18/et5VhQRyHr3UYXp.png" style="zoom: 33%;" /><p>与查询流程不一样的是，更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论的主角：redo log（重做日志）和 binlog（归档日志）。</p><h3 id="重要日志模块：redo-log-InnoDB"><a href="#重要日志模块：redo-log-InnoDB" class="headerlink" title="重要日志模块：redo log (InnoDB)"></a>重要日志模块：redo log (InnoDB)</h3><p>WAL 技术：Write-Ahead Logging 先写日志，再写磁盘。</p><p>当有一条记录要更新时，InnoDB 引擎会先把记录写到 redo log 里面，并更新内存。到适当时候，将这个操作记录更新到磁盘里面。</p><p>InnoDB 的 redo log 是固定大小的。例如一组4个文件，每个文件 1GB，就总共可以记录 4GB 内容。</p><img src="https://i.loli.net/2020/07/20/PbyOGDBIMvNYRfZ.png" style="zoom:55%;" /><p>write pos：当前记录的位置，一边写一边后移，循环着写。</p><p>check pos：当前要擦除的位置，往后移，循环的。擦除前要把记录更新到数据文件中。</p><p>绿色部分就是 redo log 中还空着的部分，可以用来记录新的操作。当 write pos 追上 check pos，就不能执行新的操作，得擦除一些记录让 check pos 前进。</p><p>crash-safe：保证即使数据库发生异常重启，之前提交的记录都不会丢失的能力。</p><h3 id="重要的日志模块：binlog"><a href="#重要的日志模块：binlog" class="headerlink" title="重要的日志模块：binlog"></a>重要的日志模块：binlog</h3><p>redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog (归档日志)。</p><p>binlog 日志只能用来归档，是没有 crash-safe 能力的。</p><p>这两个日志有三个不同点：</p><ol><li>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</li><li>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。</li><li>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ol><p>有了对这两个日志的概念性理解，我们再来看执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程。</p><ol><li>执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</li><li>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。</li><li>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</li><li>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。</li></ol><img src="https://i.loli.net/2020/07/21/PSdXYanlkp7mBFo.png" style="zoom:55%;" /><p>浅色框是在 InnoDB 中执行的，深色框是在执行器中执行的。</p><h3 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h3><p>redo log 的写入拆成了两个步骤：prepare 和 commit，这就是“两阶段提交”。为了让两份日志之间的逻辑一致。</p><p>想要数据库恢复到之前某一时刻，你可能会这么做：</p><ul><li>首先，找到最近的一次全量备份，如果你运气好，可能就是昨天晚上的一个备份，从这个备份恢复到临时库</li><li>然后，从备份的时间点开始，将备份的 binlog 依次取出来，重放到中午误删表之前的那个时刻。</li></ul><p>为什么日志需要“两阶段提交”。如果不使用“两阶段提交”会发生什么？</p><ol><li><p>先写 redo log 后写 binlog</p><p>由于 redo log 和 binlog 是两个独立的逻辑，如果不用两阶段提交，假设在写完 redo log，binlog 还没写完的时候，MySQL 进程异常重启。由于 redo log 写完，系统崩溃，也能把数据恢复回来。</p><p>但是 binlog 没写完就 crash 了，这时 binlog 没有这条更新的记录。之后备份日志，就没有这条语句。</p><p>如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 缺失，临时库就会少了这一次更新，与原库不同。</p></li><li><p>先写 binlog 后写 redo log</p><p>如果在 binlog 写完之后 crash，由于 redo log 还没写，崩溃恢复以后这个事务无效，所以这一行的值并没有改变。但是 binlog 里面已经记录了这个改变的日志。所以，在之后用 binlog 来恢复的时候就多了一个事务出来，与原库的值不同。</p></li></ol><p>如果不使用“两阶段提交”，那么数据库的状态就有可能和用它的日志恢复出来的库的状态不一致。</p><p>当你需要扩容的时候，也就是需要再多搭建一些备库来增加系统的读能力的时候，现在常见的做法也是用全量备份加上应用 binlog 来实现的，这个“不一致”就会导致你的线上出现主从数据库不一致的情况。</p><p>简单说，redo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 悦读 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 基础篇(一)</title>
      <link href="2020/07/17/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87-%E4%B8%80/"/>
      <url>2020/07/17/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="基础架构：一条SQL语句是如何执行的？"><a href="#基础架构：一条SQL语句是如何执行的？" class="headerlink" title="基础架构：一条SQL语句是如何执行的？"></a>基础架构：一条SQL语句是如何执行的？</h2><p>下面是 MySQL 基础的架构示意图。</p><img src="https://i.loli.net/2020/07/18/et5VhQRyHr3UYXp.png" alt="0d2070e8f84c4801adbfa03bda1f98d9" style="zoom: 33%;" /><p>​    大体来说，MySQL 可以分为 Server 层和存储引擎层两部分。</p><ul><li><p>Server层</p><p>Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p></li><li><p>存储引擎层</p><p>存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memeory 等多个存储引擎。最常用的是 InnoDB ，MySQL 5.5.5 之后默认存储引擎也是 InnoDB。</p><p>不同存储引擎的表数据存取方式不同，支持的功能也不同。</p></li></ul><h3 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h3><p>第一步，你会先连接到这个数据库上，这时候接待你的是连接器。连接器负责跟客户端建立连接、获取权限、维持和管理连接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h$ip -P$port -u$user -p</span><br></pre></td></tr></table></figure><p>连接命令中的 mysql 是客户端工具，用来跟服务端建立连接。在完成经典的 TCP 握手后，连接器就要开始认证你的身份，这个时候用的就是你输入的用户名和密码。</p><ul><li>如果用户名或密码不对，你就会收到一个”Access denied for user”的错误，然后客户端程序结束执行。</li><li>如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。</li></ul><p>一个用户成功建立连接后，对权限做了修改，也不会影响已经连接的权限。修改成功后，只有再建立新的连接才会使用新的权限。</p><p>连接完成后，可以用 show processlist 查看连接状态。</p><img src="https://i.loli.net/2020/07/18/Jm2IkzuhpiXEHcP.png" style="zoom:80%;" /><p>长时间处于空闲状态，客户端会将连接断开，由 wait_timeout 参数控制，默认为 8 小时。</p><p>连接断开后，客户端发送请求会收到 Lost connection to MySQL server during query。要继续就需要重连。在执行请求。</p><ul><li>长连接：建立连接后持续有请求。（推荐）</li><li>短连接：每次执行完很少的请求就断开连接。</li></ul><p>全部使用长连接，MySQL 占用内存会涨的特别快，因为MySQL执行时的临时内存是存在连接对象中的，这些资源只有在断在连接后才会释放。占用过多被系统强行杀掉（OOM），就是 MySQL 异常重启。</p><p>解决方案</p><ol><li>定期断开长连接。</li><li>MySQL 5.7 以上版本，可以执行 mysql_reset_connection 来初始化连接资源。这个过程不会重连和重新做权限验证。</li></ol><h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><p>注：MySQL 8.0 不再支持</p><p>连接建立后，执行逻辑就来到第二步：查询缓存。</p><p>MySQL 拿到一个查询请求后，会看查询缓存中有没有这条语句。查询缓存中是 key-value 的键值对，被直接存放在内存中，key 是查询语句，value 是查询结果。</p><p><strong>查询缓存往往弊大于利</strong></p><p>一个表更新后，所有这个表的查询缓存都会被清空。对于更新压力大的数据库，查询缓存命中的概率特别低。静态表才适合使用查询缓存。</p><p>“按需使用”：</p><p>将参数 query_cache_type 设置成 DEMAND，对默认的 SQL 语句不使用查询缓存。对使用查询缓存的 SQL 语句用 SQL_CACHE 显示定义。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SQL_CACHE <span class="operator">*</span> <span class="keyword">from</span> T <span class="keyword">where</span> ID<span class="operator">=</span><span class="number">10</span>；</span><br></pre></td></tr></table></figure><h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><p>现在开始正在执行语句。</p><p>分析器先会做“词法分析”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。</p><p>MySQL 从你输入的”select”这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。</p><p>做完了这些识别以后，就要做“语法分析”。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。</p><h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。比如你执行下面这样的语句，这个语句是执行两个表的 join：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">join</span> t2 <span class="keyword">using</span>(ID)  <span class="keyword">where</span> t1.c<span class="operator">=</span><span class="number">10</span> <span class="keyword">and</span> t2.d<span class="operator">=</span><span class="number">20</span>;</span><br></pre></td></tr></table></figure><ul><li>既可以先从表 t1 里面取出 c=10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20。</li><li>也可以先从表 t2 里面取出 d=20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10。</li></ul><p>这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。</p><h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><p>开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误，如下所示 (在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。查询也会在优化器之前调用 precheck 验证权限)。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> T <span class="keyword">where</span> ID<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">ERROR <span class="number">1142</span> (<span class="number">42000</span>): <span class="keyword">SELECT</span> command denied <span class="keyword">to</span> <span class="keyword">user</span> <span class="string">&#x27;b&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">for</span> <span class="keyword">table</span> <span class="string">&#x27;T&#x27;</span></span><br></pre></td></tr></table></figure><p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</p><ol><li>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；</li><li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</li><li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li></ol><p>对于有索引的表，执行的逻辑也差不多。第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。</p><p>你会在数据库的慢查询日志中看到一个 rows_examined 的字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。</p><p>在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此引擎扫描行数跟 rows_examined 并不是完全相同的。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 悦读 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手从零开始搭建自己的个人博客</title>
      <link href="2020/07/16/%E6%89%8B%E6%8A%8A%E6%89%8B%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2020/07/16/%E6%89%8B%E6%8A%8A%E6%89%8B%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文内容主要关于如何搭建个人博客，暂不考虑具体的内容，样式设计</p><p>大家可以先把博客给搭起来，然后再考虑样式和页面美观等问题，这些可以之后熟练了慢慢玩，重要的是要先耍起来</p><p>本教程是基于<a href="https://hexo.io/zh-cn/">hexo</a>这个博客框架来搭建的。主要是因为这个框架比较成熟，网上的教程也非常多，遇到问题，解决方案也比较成熟，对于刚接触博客的小白比较友好。</p><p>本教程基于MacOS 10.15.4。对于Windows和Linux搭建过程也大差不差，影响不大。</p><h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><h3 id="nodejs安装"><a href="#nodejs安装" class="headerlink" title="nodejs安装"></a>nodejs安装</h3><p>可以到<a href="http://nodejs.cn/download/">nodejs</a>的官网进行下载。选择对应自己系统的下载即可。</p><p><img src="https://i.loli.net/2020/07/16/bHKdRyQUXfpZmvY.png" alt="nodejs-download"></p><p>安装过程直接不停的下一步就可以了。</p><p>下载安装完成后，打开Terminal，查看版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>如果显示对应的版本，即为安装成功。</p><hr><h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><p>直接前往<a href="https://git-scm.com/">Git</a>官网进行下载安装即可</p><p><img src="https://i.loli.net/2020/07/16/x7qmgIhkda8b35s.png" alt="截屏2020-07-16 下午6.53.20"></p><hr><h3 id="hexo博客框架安装"><a href="#hexo博客框架安装" class="headerlink" title="hexo博客框架安装"></a>hexo博客框架安装</h3><p>hexo主要利用npm进行安装，由于npm的服务器是在国外，直接用npm安装网速感人。</p><ol><li><p>可以设置npm的镜像源</p><p>临时</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g express --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>持久</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>不推荐采用这种方式，如果把镜像完全设置成淘宝的，万一你要安装的资源淘宝没有，那就惨了。所以还是推荐采用cnpm。将npm和cnpm分开。</p><p>cnpm中没有的资源，它还是用npm来安装，同时淘宝后台会将这个没有的资源同步到后台中。</p></li><li><p>可以用cnpm来安装（推荐）</p><p>首先安装cnpm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>安装之后可以查看cnpm版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure></li></ol><p>安装hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>查看hexo版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>如果显示了对应版本就安装成功了。</p><h2 id="二、正式搭建博客"><a href="#二、正式搭建博客" class="headerlink" title="二、正式搭建博客"></a>二、正式搭建博客</h2><h3 id="博客安装"><a href="#博客安装" class="headerlink" title="博客安装"></a>博客安装</h3><p>用Terminal cd 到你想要安装博客的目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /xxx/xxx/xxx</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>然后静静地等待它clone完成就好了。</p><p>至此，个人博客的安装就已经完成啦！</p><hr><h3 id="博客启动"><a href="#博客启动" class="headerlink" title="博客启动"></a>博客启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server || hexo s</span><br></pre></td></tr></table></figure><p>博客就已经成功启动了。</p><p>浏览器中输入 localhost:4000 就可以访问本地博客啦。</p><hr><h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;blogname&quot;</span><br></pre></td></tr></table></figure><p>hexo会自动在source/_posts目录下生成blogname.md文件。博客的名字可以随便取。</p><p>生成博客的模版可以在scaffolds中定义，有draft、page、 post三种格式。</p><p>博客写完之后只需重新部署博客就可以了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><h2 id="三、博客部署到服务器上"><a href="#三、博客部署到服务器上" class="headerlink" title="三、博客部署到服务器上"></a>三、博客部署到服务器上</h2><p>前面的 hexo s 只能把博客部署在本地，如果要搭建个人博客肯定不可能搭建在本地，通过localhost:4000来访问，所以接下来分享如何将博客部署到远端服务器上。</p><hr><h3 id="部署在GitHub上"><a href="#部署在GitHub上" class="headerlink" title="部署在GitHub上"></a>部署在GitHub上</h3><p>这里推荐一个免费的方式，部署在 github pages 上。</p><p>由于github是国外的服务器，访问速度比较慢，所以如果博客主题比较花哨，比较大，可能会出现部分资源加载不出来的情况。</p><ol><li><p>首先进入GitHub</p></li><li><p>新建一个公开的仓库。 <strong>注</strong>：仓库名称一定要为 用户名.github.io</p></li><li><p>回到博客的根目录，安装一个Git部署的工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li><li><p>在根目录下找到_config.yml（不是在theme目录下！）</p><p>修改deploy内容，一般在文件的末尾</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="comment">#你仓库的clone地址。一般为网址+.git 如http://www.github.com/用户名/仓库名.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li><p>部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>这时候一般会要求你输入你github的账号和密码。</p><p>输入完成后，博客就成功部署到github上去了！</p><p>浏览器访问 用户名.github.io 就可以访问啦！ （例如：ZhangZhenwen.github.io）</p><p>注：前面没有www.</p><p>注：前面没有www.</p><p>注：前面没有www.</p></li></ol><hr><p>至此个人博客搭建的简易教程就完成啦。后续有时间在分享如何更换网页内的样式等等。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 悦读 </tag>
            
            <tag> web </tag>
            
            <tag> 玩转hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客正式成立！</title>
      <link href="2020/07/16/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%AD%A3%E5%BC%8F%E6%88%90%E7%AB%8B%EF%BC%81/"/>
      <url>2020/07/16/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%AD%A3%E5%BC%8F%E6%88%90%E7%AB%8B%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h3 id="个人博客建立"><a href="#个人博客建立" class="headerlink" title="个人博客建立"></a>个人博客建立</h3><p>该网站于2020-07-15建立</p><p>目前还正在完善中……</p><h3 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h3><p>在借助hexo的基础上，我的个人博客也终于是建立起来了。</p><p>原先想过自己手搭博客，奈何技术不够过硬，倒在了网站设计和数据库设计上面。</p><img src="https://i.loli.net/2020/07/16/IufiR3dDzOQwxcT.jpg" style="zoom:25%;" /><p>想想不如去折腾现有的博客框架，在框架的基础上做二次开发。在搭建博客的过程中也踩过许多坑，走了许多弯路，幸亏网上对于hexo搭建的教程和问题的解决方案比较齐全。</p><h3 id="网站用途"><a href="#网站用途" class="headerlink" title="网站用途"></a>网站用途</h3><p>这个个人网站将用于分享一些技术博客，也将自己写过的博客放上去。记录一些日常生活，分享一些经典的影视作品。</p><p>老实说，网站才刚刚成立，具体还没想好做些什么。分类啥的也还没弄清楚，总之先搭建起来，慢慢玩…</p><img src="http://qdjubyjub.bkt.clouddn.com/img/IMG_1350.JPG" style="zoom:25%;" /><h2 id="还有啥，一时想不起来……"><a href="#还有啥，一时想不起来……" class="headerlink" title="还有啥，一时想不起来……"></a>还有啥，一时想不起来……</h2><p>To be continued…</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 悦读 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
